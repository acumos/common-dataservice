/*-
 * ===============LICENSE_START=======================================================
 * Acumos
 * ===================================================================================
 * Copyright (C) 2017 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
 * ===================================================================================
 * This Acumos software file is distributed by AT&T and Tech Mahindra
 * under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * This file is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ===============LICENSE_END=========================================================
 */

package org.acumos.cds.repository;

import org.acumos.cds.domain.MLPCatRoleMap;
import org.acumos.cds.domain.MLPCatalog;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;

public interface CatRoleMapRepository extends CrudRepository<MLPCatRoleMap, MLPCatRoleMap.CatalogRoleMapPK> {

	/**
	 * Counts the catalogs assigned to the specified role .
	 * 
	 * @param roleId
	 *                   Role ID
	 * @return Count of catalogs mapped to the role
	 */
	@Query(value = "select count(m) from MLPCatRoleMap m where m.roleId = :roleId")
	long countRoleCatalogs(@Param("roleId") String roleId);

	/**
	 * Gets a page of catalogs for the specified role by joining on the catalog-role
	 * mapping table.
	 * 
	 * @param roleId
	 *                     Role ID
	 * @param pageable
	 *                     Page and sort criteria
	 * @return Page of MLPCatalog
	 */
	@Query(value = "SELECT c from MLPCatalog c, MLPCatRoleMap m " //
			+ " WHERE c.catalogId = m.catalogId " //
			+ " AND m.roleId = :roleId")
	Page<MLPCatalog> findCatalogsByRoleId(@Param("roleId") String roleId, Pageable pageable);

	/**
	 * Finds all entries for the specified catalogId.
	 * 
	 * Generated by Spring magic.
	 * 
	 * @param catalogId
	 *                      Catalog ID
	 * @return Iterable of map objects
	 */
	Iterable<MLPCatRoleMap> findByCatalogId(@Param("catalogId") String catalogId);

	/**
	 * Gets a page of all catalogs accessible to the specified user by joining on
	 * the catalog-role and user-role mapping tables. This includes catalogs with
	 * access type code PB; i.e., unrestricted.
	 * 
	 * @param userId
	 *                     User ID
	 * @param pageable
	 *                     Page and sort criteria
	 * @return Page of MLPCatalog
	 */
	@Query(value = "SELECT DISTINCT c from MLPCatalog c, MLPCatRoleMap crm, MLPUserRoleMap urm " //
			+ "  WHERE c.accessTypeCode = 'PB'" //
			+ "    OR " //
			+ "        c.accessTypeCode != 'PB' " //
			+ "    AND c.catalogId = crm.catalogId " //
			+ "    AND crm.roleId = urm.roleId " //
			+ "    AND urm.userId = :userId")
	Page<MLPCatalog> findCatalogsByUserId(@Param("userId") String userId, Pageable pageable);

}
