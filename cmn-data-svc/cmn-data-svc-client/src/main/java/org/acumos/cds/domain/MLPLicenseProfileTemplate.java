/*-
 * ===============LICENSE_START=======================================================
 * Acumos
 * ===================================================================================
 * Copyright (C) 2019 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
 * ===================================================================================
 * This Acumos software file is distributed by AT&T and Tech Mahindra
 * under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * This file is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ===============LICENSE_END=========================================================
 */

package org.acumos.cds.domain;

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;

import io.swagger.annotations.ApiModelProperty;
import io.swagger.annotations.ApiModelProperty.AccessMode;

/**
 * A key-value store for JSON content. In the language of the License User
 * Manager (LUM), a "license profile template" becomes a "license profile" and
 * then a "license".
 */
@Entity
@Table(name = "C_LICENSE_PROFILE_TEMPLATE")
public class MLPLicenseProfileTemplate extends MLPTimestampedEntity implements Serializable { //

	private static final long serialVersionUID = 6260070847006499966L;

	// Hibernate is weak on the ID column generator, the method is specific to
	// the backing database. For portability, specify AUTO and define the column
	// appropriately in the database, which in MySQL requires "AUTO_INCREMENT".
	// The "native" annotations work in Hibernate 5.3 with Mariadb 10.2.
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
	@GenericGenerator(name = "native", strategy = "native")
	@Column(name = "TEMPLATE_ID", nullable = false, updatable = false, columnDefinition = "INT")
	@ApiModelProperty(accessMode = AccessMode.READ_ONLY, value = "Generated", example = "12345")
	// Generated by DB; NotNull annotation not needed
	private Long templateId;

	@Column(name = "TEMPLATE_NAME", nullable = false, columnDefinition = "VARCHAR(50)")
	@NotNull(message = "Template name cannot be null")
	@Size(max = 50)
	@ApiModelProperty(required = true, value = "Name", example = "License template one")
	private String templateName;

	// JSON
	@Column(name = "TEMPLATE", nullable = false, columnDefinition = "VARCHAR(8192)")
	@NotNull(message = "License cannot be null")
	@ApiModelProperty(required = true, value = "JSON", example = "{ \"tag\" : \"value\" }")
	@Size(max = 8192)
	private String template;

	@Column(name = "PRIORITY", nullable = false, columnDefinition = "INT")
	@NotNull(message = "Priority cannot be null")
	@Min(value = 0)
	@ApiModelProperty(required = true, value = "Priority", example = "1")
	private long priority;

	@Column(name = "USER_ID", nullable = false, columnDefinition = "CHAR(36)")
	@NotNull(message = "User ID cannot be null")
	@Size(max = 36)
	@ApiModelProperty(value = "UUID", example = "12345678-abcd-90ab-cdef-1234567890ab")
	private String userId;

	/**
	 * No-arg constructor.
	 */
	public MLPLicenseProfileTemplate() {
		// no-arg constructor
	}

	/**
	 * This constructor accepts the required fields; i.e., the minimum that the user
	 * must supply to create a valid instance.
	 * 
	 * @param templateName
	 *                         License profile template name
	 * @param template
	 *                         License profile template, validated as JSON
	 * @param priority
	 *                         Priority
	 * @param userId
	 *                         User ID
	 * 
	 */
	public MLPLicenseProfileTemplate(String templateName, String template, int priority, String userId) {
		if (templateName == null || template == null || userId == null)
			throw new IllegalArgumentException("Null not permitted");
		this.templateName = templateName;
		this.template = template;
		this.userId = userId;
	}

	/**
	 * Copy constructor
	 * 
	 * @param that
	 *                 Instance to copy
	 */
	public MLPLicenseProfileTemplate(MLPLicenseProfileTemplate that) {
		super(that);
		this.template = that.template;
		this.templateId = that.templateId;
		this.templateName = that.templateName;
		this.priority = that.priority;
		this.userId = that.userId;
	}

	public Long getTemplateId() {
		return templateId;
	}

	public void setTemplateId(Long id) {
		this.templateId = id;
	}

	public String getTemplateName() {
		return templateName;
	}

	public void setTemplateName(String licenseName) {
		this.templateName = licenseName;
	}

	public String getTemplate() {
		return template;
	}

	public void setTemplate(String license) {
		this.template = license;
	}

	public long getPriority() {
		return priority;
	}

	public void setPriority(long priority) {
		this.priority = priority;
	}

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (!(that instanceof MLPLicenseProfileTemplate))
			return false;
		MLPLicenseProfileTemplate thatObj = (MLPLicenseProfileTemplate) that;
		return Objects.equals(templateId, thatObj.templateId);
	}

	@Override
	public int hashCode() {
		return Objects.hash(templateId, template, userId);
	}

	@Override
	public String toString() {
		return this.getClass().getName() + "[id=" + templateId + ", value=" + template + ", prio=" + priority
				+ ", user=" + userId + ", created=" + getCreated() + ", ...]";
	}

}
