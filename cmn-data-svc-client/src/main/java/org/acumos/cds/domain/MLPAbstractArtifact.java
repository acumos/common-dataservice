/*-
 * ===============LICENSE_START=======================================================
 * Acumos
 * ===================================================================================
 * Copyright (C) 2017 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
 * ===================================================================================
 * This Acumos software file is distributed by AT&T and Tech Mahindra
 * under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * This file is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ===============LICENSE_END=========================================================
 */

package org.acumos.cds.domain;

import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;

/**
 * Base model for an artifact. Maps all simple columns; maps no complex columns
 * that a subclass might want to map in alternate ways. For example the owner
 * column is not mapped here; that is a user ID reference to an MLPUser entity,
 * and could be exposed as a string or as an object via Hibernate magic.
 */
@MappedSuperclass
public class MLPAbstractArtifact extends MLPTimestampedEntity  {

	@Id
	@GeneratedValue(generator = "customUseOrGenerate")
	@GenericGenerator(name = "customUseOrGenerate", strategy = "org.acumos.cds.util.UseExistingOrNewUUIDGenerator")
	@Column(name = "ARTIFACT_ID", updatable = false, nullable = false, columnDefinition = "CHAR(36)")
	// Generated by DB; NotNull annotation not needed
	private String artifactId;

	@Column(name = "VERSION", nullable = false, columnDefinition = "VARCHAR(25)")
	@NotNull(message = "Version cannot be null")
	@Size(max = 25)
	private String version;

	/**
	 * This code is defined by {@link org.acumos.cds.ArtifactTypeCode}
	 */
	@Column(name = "ARTIFACT_TYPE_CD", nullable = false, columnDefinition = "CHAR(2)")
	@NotNull(message = "The type code cannot be null")
	@Size(max = 2)
	private String artifactTypeCode;

	@Column(name = "NAME", nullable = false, columnDefinition = "VARCHAR(100)")
	@NotNull(message = "Artifact name cannot be null")
	@Size(max = 100)
	private String name;

	@Column(name = "DESCRIPTION", columnDefinition = "VARCHAR(512)")
	@Size(max = 512)
	private String description;

	@Column(name = "URI", nullable = false, columnDefinition = "VARCHAR(512)")
	@NotNull(message = "Artifact URI cannot be null")
	@Size(max = 512)
	private String uri;

	@Column(name = "SIZE", nullable = false, columnDefinition = "INT")
	@NotNull(message = "Size cannot be null")
	private Integer size;

	@Column(name = "METADATA", columnDefinition = "VARCHAR(1024)")
	@Size(max = 1024)
	private String metadata;

	/**
	 * No-arg constructor.
	 */
	public MLPAbstractArtifact() {
		// no-arg constructor
	}

	/**
	 * This constructor accepts the required fields; i.e., the minimum that the user
	 * must supply to create a valid instance.
	 * 
	 * @param version
	 *            Version string
	 * @param artifactTypeCode
	 *            Valid artifact type code
	 * @param name
	 *            Name
	 * @param uri
	 *            URI
	 * @param size
	 *            Length
	 */
	public MLPAbstractArtifact(String version, String artifactTypeCode, String name, String uri, int size) {
		if (version == null || artifactTypeCode == null || name == null || uri == null)
			throw new IllegalArgumentException("Null not permitted");
		this.version = version;
		this.artifactTypeCode = artifactTypeCode;
		this.name = name;
		this.uri = uri;
		this.size = size;
	}

	public String getArtifactId() {
		return artifactId;
	}

	public void setArtifactId(String artifactId) {
		this.artifactId = artifactId;
	}

	public String getArtifactTypeCode() {
		return artifactTypeCode;
	}

	/**
	 * @param artifactTypeCode
	 *            A value obtained by calling
	 *            {@link org.acumos.cds.ArtifactTypeCode#toString()}.
	 */
	public void setArtifactTypeCode(String artifactTypeCode) {
		this.artifactTypeCode = artifactTypeCode;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getUri() {
		return uri;
	}

	public void setUri(String uri) {
		this.uri = uri;
	}

	public String getVersion() {
		return version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Integer getSize() {
		return size;
	}

	public void setSize(Integer size) {
		this.size = size;
	}

	public String getMetadata() {
		return metadata;
	}

	public void setMetadata(String metadata) {
		this.metadata = metadata;
	}

	/**
	 * The ID field is primary, so defining this method here factors out code.
	 */
	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (!(that instanceof MLPAbstractArtifact))
			return false;
		MLPAbstractArtifact thatObj = (MLPAbstractArtifact) that;
		return Objects.equals(artifactId, thatObj.artifactId);
	}

	/**
	 * The ID field is primary, so defining this method here factors out code.
	 */
	@Override
	public int hashCode() {
		return Objects.hash(artifactId, artifactTypeCode, description, version, uri);
	}

}
