###
# ===============LICENSE_START=======================================================
# Acumos
# ===================================================================================
# Copyright (C) 2017 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
# ===================================================================================
# This Acumos software file is distributed by AT&T and Tech Mahindra
# under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#  
#      http://www.apache.org/licenses/LICENSE-2.0
#  
# This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===============LICENSE_END=========================================================
###

# MLP common data service configuration file template.
# Developers can copy this to a file "application.properties"
# and use it for development and test.  The same can be done
# for deployment, but when using Docker-Compose the better way
# is via a JSON block in the environment variable 
# SPRING_APPLICATION_JSON like this:
#
#      SPRING_APPLICATION_JSON: '{
#          "server" : {
#              "port" : 8002
#          },
#          "security" : {
#              "user" : {
#                  "name"     : "ccds_client",
#                  "password" : "ENC(encrypted-string-here)"
#              }
#          },
#          "spring" : {
#              "database" : {
#                  "driver" : {
#                      "classname" : "org.mariadb.jdbc.Driver"
#                  }
#              },
#              "datasource" : {
#                  "url"      : "jdbc:mariadb://hostname-db:3306/cds?useSSL=false",
#                  "username" : "cds",
#                  "password" : "ENC(encrypted-string-here)"
#              },
#              "jpa" : {
#                  "database-platform" : "org.hibernate.dialect.MySQLDialect",
#                  "hibernate" : {
#                      "ddl-auto" : "validate"
#                  }
#              }
#          }
#     }'
#
# The following properties are different in all deployments; 
# values must be externalized in docker-start scripts like
# docker-compose.yml

server.port=8081

# REST endpoints are protected by HTTP Basic Authentication
# Encrypted password - see README.md
security.user.name=ccds-web-user
security.user.password = ccds-web-pass
# Encrypted password - see README.md
# security.user.password = ENC(CTQD7Xk5bOIuC4MaqRZtzjW1K4ArjCjr)

# Database coordinates
# Mysql/Mariadb must set this parameter: useLegacyDatetimeCode=false
# Add the following parameter if the host machine has an unexpected timezone string:
#    &serverTimezone=GMT-05:00
# Example error: QueryException: The server time_zone 'Eastern Standard Time' cannot be parsed.
spring.datasource.url = jdbc:mariadb://localhost:3306/db-name?useLegacyDatetimeCode=false&useSSL=false
spring.datasource.username = db-user-name
spring.datasource.password = db-user-pass
# Encrypted password - see README.md
# spring.datasource.password = ENC(neXyzs+frWL6UQmH5Ii+tO5eo0Lkk9x+)
# Platform name is used to find data.sql file on classpath (only for test)
# spring.datasource.platform = mariadb

# Specify ORM dialect 
# spring.jpa.database-platform=org.hibernate.dialect.DerbyTenSevenDialect
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
# Hibernate creates the tables when using Derby; others use "validate"
# spring.jpa.hibernate.ddl-auto = create
spring.jpa.hibernate.ddl-auto=validate

###############################################################

# The following properties are similar in all deployments,
# so the values can be externalized as needed.

# REST endpoint configuration; i.e., where this server listens
server.context-path=/ccds

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.test-while-idle = true
spring.datasource.validation-query = SELECT 1

spring.jpa.show-sql=false
# Generate names as annotated which use upper case.
# Without this config Spring uses lower case, which requires case-insensitivity at database.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# this breaks swagger, don't add it!
# spring.resources.add-mappings=false

# Guards passwords
jasypt.encryptor.password=supersecret

# Enumerated code-name value sets.
# Case *IS* relevant here!
#
codeName.accessType.OR=Organization
codeName.accessType.PB=Public
codeName.accessType.PR=Private
#
codeName.artifactType.BP=Blueprint File
codeName.artifactType.CD=Cdump File
codeName.artifactType.DI=Docker Image
codeName.artifactType.DP=Docker Image Pre-Dockerized
codeName.artifactType.DS=Data Source
codeName.artifactType.LG=Log File
codeName.artifactType.LI=License
codeName.artifactType.MD=Metadata
codeName.artifactType.MH=Model-H2O
codeName.artifactType.MI=Model Image
codeName.artifactType.MR=Model-R
codeName.artifactType.MS=Model-SciKit
codeName.artifactType.MT=Model-Tensorflow
codeName.artifactType.TE=TOSCA Template
codeName.artifactType.TG=TOSCA Generator Input File
codeName.artifactType.TS=TOSCA Schema
codeName.artifactType.TT=TOSCA Translate
codeName.artifactType.PJ=Protobuf File
#
codeName.deploymentStatus.DP=Deployed
codeName.deploymentStatus.FA=Failed
codeName.deploymentStatus.IP=In Progress
codeName.deploymentStatus.ST=Started
#
codeName.loginProvider.FB=Facebook
codeName.loginProvider.GH=GitHub
codeName.loginProvider.GP=Google Plus
codeName.loginProvider.LI=LinkedIn
#
codeName.messageSeverity.HI=High
codeName.messageSeverity.ME=Medium
codeName.messageSeverity.LO=Low
#
codeName.modelType.CL=Classification
codeName.modelType.DS=Data Sources
codeName.modelType.DT=Data Transformer
codeName.modelType.PR=Prediction
codeName.modelType.RG=Regression
#
codeName.notificationDeliveryMechanism.EM=Email
codeName.notificationDeliveryMechanism.TX=Text
#
codeName.peerStatus.AC=Active
codeName.peerStatus.IN=Inactive
codeName.peerStatus.RQ=Requested
codeName.peerStatus.RN=Renounced
codeName.peerStatus.DC=Declined
#
codeName.publishRequestStatus.AP=Approved
codeName.publishRequestStatus.DC=Declined
codeName.publishRequestStatus.PE=Pending
codeName.publishRequestStatus.WD=Withdrawn
#
codeName.stepStatus.ST=Started
codeName.stepStatus.SU=Succeeded
codeName.stepStatus.FA=Failed
#
codeName.stepType.OB=Onboarding
codeName.stepType.VL=Validation
#
codeName.subscriptionScope.RF=Reference
codeName.subscriptionScope.FL=Full
#
codeName.toolkitType.BR=Data Broker
codeName.toolkitType.CO=Collator
codeName.toolkitType.CP=Composite Solution
codeName.toolkitType.DS=Design Studio
codeName.toolkitType.H2=H2O
codeName.toolkitType.ON=ONAP
codeName.toolkitType.PB=Probe
codeName.toolkitType.RC=R
codeName.toolkitType.SK=Scikit-Learn
codeName.toolkitType.SP=Splitter
codeName.toolkitType.TF=TensorFlow
codeName.toolkitType.TC=Training Client
#
codeName.verifiedLicense.SU=Success
codeName.verifiedLicense.FA=Failed
codeName.verifiedLicense.IP=In progress
codeName.verifiedLicense.UR=Unrequested

codeName.verifiedVulnerability.SU=Success
codeName.verifiedVulnerability.FA=Failed
codeName.verifiedVulnerability.IP=In progress
codeName.verifiedVulnerability.UR=Unrequested

# configurable behavior on authentication failure
# When does temp block start
login.failure.count = 3
# in seconds
login.failure.block.time = 900

# App root logger level can be configured here:
# logging.level.root=INFO
# Specific loggers can be configured here:
# logging.level.org.springframework.web=INFO
