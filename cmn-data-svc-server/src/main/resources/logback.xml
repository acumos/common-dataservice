<?xml version="1.0" encoding="UTF-8"?>
<!--
  ===============LICENSE_START=======================================================
  Acumos
  ===================================================================================
  Copyright (C) 2017 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
  ===================================================================================
  This Acumos software file is distributed by AT&T and Tech Mahindra
  under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
   
	   http://www.apache.org/licenses/LICENSE-2.0
   
  This file is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  ===============LICENSE_END=========================================================
  -->

<configuration scan="true" debug="false">

	<!-- component name is log file basename -->
	<property name="componentName" value="cmn-data-svc"></property>

	<!-- gather files in a subdirectory - usually a volume in docker -->
	<property name="logDirectory" value="logs/ccds" />

	<!-- Based on https://wiki.acumos.org/display/OAM/Log+Standards -->
	<property name="LogTimestamp"   value="%d{&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, UTC}"/>
	<property name="Level"          value="%.-5level"/>
	<!-- Logger yields original class name for SLF4J loggers, useless EELF class name for EELF loggers -->
	<property name="Logger"         value="%logger"/>
	<property name="Mdc"            value="%replace(%replace(%mdc){'\t','\\\\t'}){'\n','\\\\n'}"/>
	<property name="Message"        value="%replace(%replace(%msg){'\t','\\\\t'}){'\n','\\\\n'}"/>
	<property name="Exception"      value="%replace(%replace(%ex){'\t', '\\\\t'}){'\n','\\\\n'}"/>
	<property name="Marker"         value="%replace(%replace(%marker){'\t','\\\\t'}){'\n','\\\\n'}"/>
	<property name="p_1_LogTimestamp"       value="${LogTimestamp}" />
	<property name="p_2_EntryTimestamp"     value="%X{EntryTimestamp}" />
	<property name="p_3_InvokeTimestamp"    value="%X{InvokeTimestamp}" />
	<property name="p_4_RequestID"          value="%X{RequestID}" />
	<property name="p_5_InvocationID"       value="%X{InvocationId}" />
	<property name="p_6_InstanceID"         value="%X{InstanceUUID}" /> <!--  previously InstanceUUID -->
	<property name="p_7_ServiceInstanceID"  value="%X{ServiceInstanceId}" />
	<property name="p_8_thread"             value="$%thread}" />
	<property name="p_9_ServiceName"        value="%X{ServiceName}" />
	<property name="p_10_PartnerName"       value="%X{PartnerName}" />
	<property name="p_11_StatusCode"        value="%X{StatusCode}" />
	<property name="p_12_ResponseCode"      value="%X{ResponseCode}" />
	<property name="p_13_ResponseDesc"      value="%X{ResponseDesc}" />
	<property name="p_14_level"             value="${Level}" />
	<property name="p_15_Severity"          value="%X{Severity}" />
	<property name="p_16_ServerIPAddress"   value="%X{ServerIPAddress}" />
	<property name="p_17_ElapsedTime"       value="%X{ElapsedTime}" />
	<property name="p_18_ServerFQDN"        value="%X{ServerFQDN}" />
	<property name="p_19_ClientIPAddress"   value="%X{ClientIPAddress}" />
	<property name="p_20_VirtualServerName" value="%X{VirtualServerName}" />
	<property name="p_21_ContextName"       value="%X{ContextName}" />
	<property name="p_22_TargetEntity"      value="%X{TargetEntity}" />
	<property name="p_23_TargetServiceName" value="%X{TargetServiceName}" />
	<property name="p_24_TargetElement"     value="%X{TargetElement}" />
	<property name="p_25_User"              value="%X{User}" />
	<property name="p_26_logger"            value="${Logger}" />
	<!-- Repeating all the MDC values sent by previous patterns adds useless clutter -->
	<!-- so instead define a no-op pattern for field 27 that is always blank.  -->
	<property name="p_27_mdc"               value="${Mdc}" />
	<property name="p_27_no_mdc"            value="%X{NO_MDC}" />
	<property name="p_28_message"           value="${Message}" />
	<!-- Code sends no markers in Athena release -->
	<property name="p_29_marker"            value="${Marker}" />
	<!-- Show exception details in field 29 because that's VALUABLE information -->
	<property name="p_29_exception"         value="${Exception}" />
	<!-- Exception stack trace in field 29 includes linebreaks, useful for console and people -->
	<property name="multiLineAthenaPattern"  value="${p_1_LogTimestamp}|${p_2_EntryTimestamp}|${p_3_InvokeTimestamp}|${p_4_RequestID}|${p_5_InvocationID}|${p_6_InstanceID}|${p_7_ServiceInstanceID}|${p_8_thread}|${p_9_ServiceName}|${p_10_PartnerName}|${p_11_StatusCode}|${p_12_ResponseCode}|${p_13_ResponseDesc}|${p_14_level}|${p_15_Severity}|${p_16_ServerIPAddress}|${p_17_ElapsedTime}|${p_18_ServerFQDN}|${p_19_ClientIPAddress}|${p_20_VirtualServerName}|${p_21_ContextName}|${p_22_TargetEntity}|${p_23_TargetServiceName}|${p_24_TargetElement}|${p_25_User}|${p_26_logger}|${p_27_no_mdc}|${p_28_message}|%ex%n" />
	<!-- Exception stack trace in field 29 has no linebreaks, useful for log file; use %nopexception to disable Logback default behavior of appending %ex -->
	<property name="singleLineAthenaPattern" value="%nopexception${p_1_LogTimestamp}|${p_2_EntryTimestamp}|${p_3_InvokeTimestamp}|${p_4_RequestID}|${p_5_InvocationID}|${p_6_InstanceID}|${p_7_ServiceInstanceID}|${p_8_thread}|${p_9_ServiceName}|${p_10_PartnerName}|${p_11_StatusCode}|${p_12_ResponseCode}|${p_13_ResponseDesc}|${p_14_level}|${p_15_Severity}|${p_16_ServerIPAddress}|${p_17_ElapsedTime}|${p_18_ServerFQDN}|${p_19_ClientIPAddress}|${p_20_VirtualServerName}|${p_21_ContextName}|${p_22_TargetEntity}|${p_23_TargetServiceName}|${p_24_TargetElement}|${p_25_User}|${p_26_logger}|${p_27_no_mdc}|${p_28_message}|${p_29_exception}%n" />

	<!-- Passes only events with level WARN or above -->
	<appender name="console-warn" class="ch.qos.logback.core.ConsoleAppender">
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>WARN</level>
		</filter>
		<encoder>
			<pattern>${multiLineAthenaPattern}</pattern>
		</encoder>
	</appender>

	<appender name="file-rolling" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${logDirectory}/${componentName}.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<fileNamePattern>${logDirectory}/${componentName}.%i.log.zip</fileNamePattern>
			<minIndex>1</minIndex>
			<maxIndex>9</maxIndex>
		</rollingPolicy>
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<maxFileSize>10MB</maxFileSize>
		</triggeringPolicy>
		<encoder>
			<pattern>${singleLineAthenaPattern}</pattern>
		</encoder>
	</appender>

	<appender name="file-async" class="ch.qos.logback.classic.AsyncAppender">
		<queueSize>256</queueSize>
		<appender-ref ref="file-rolling" />
	</appender>

	<!-- The root level is the default for all loggers, NOT a filter on any appender.
		 This level can be set with property logging.level.root=LEVEL. -->
	<root level="INFO">
		<appender-ref ref="file-async" />
		<appender-ref ref="console-warn" />
	</root>

	<!-- Show SQL generated for Criteria queries like this:
		<logger name="org.hibernate.SQL" level="DEBUG" />
	-->
	<!-- Setting root level to debug yields *enormous* output from Spring,
		 limit that verbose output by setting these also:
		<logger name="org.apache.http" level="INFO" />
		<logger name="org.springframework.web.client" level="INFO" />
		<logger name="org.springframework.beans.factory.support" level="INFO"/>
		<logger name="springfox.documentation" level="INFO" />
		<logger name="org.hibernate.engine.jdbc.spi" level="INFO" />
	 -->

</configuration>
