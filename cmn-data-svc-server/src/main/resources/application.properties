###
# ===============LICENSE_START=======================================================
# Acumos
# ===================================================================================
# Copyright (C) 2017 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
# ===================================================================================
# This Acumos software file is distributed by AT&T and Tech Mahindra
# under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#  
#      http://www.apache.org/licenses/LICENSE-2.0
#  
# This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===============LICENSE_END=========================================================
###

# Default property values for the Acumos Common Dataservice.
# Specifies a Derby database for ease of demonstration and test.
#
# All the values in the top section MUST be specified in a
# production deployment. An easy way is with a JSON block in
# the environment variable SPRING_APPLICATION_JSON like this:
#
#      SPRING_APPLICATION_JSON: '{
#          "server" : {
#              "port" : 8002
#          },
#          "security" : {
#              "user" : {
#                  "name"     : "ccds_client",
#                  "password" : "ENC(encrypted-string-here)"
#              }
#          },
#          "spring" : {
#              "database" : {
#                  "driver" : {
#                      "classname" : "org.mariadb.jdbc.Driver"
#                  }
#              },
#              "datasource" : {
#                  "url" : "jdbc:mariadb://hostname-db:3306/cds?useSSL=false",
#                  "username" : "cds",
#                  "password" : "ENC(encrypted-string-here)"
#              },
#              "jpa" : {
#                  "database-platform" : "org.hibernate.dialect.MySQLDialect",
#                  "hibernate" : {
#                      "ddl-auto" : "validate"
#                  }
#              }
#          },
# Optionally set the logging level for packages and classes
#          "logging" : {
#              "level" : {
#                  "org" : {
#                      "springframework" : {
#                          "web" : "INFO"
#                      }
#                  }
#              }
#          }
#     }'

# The server port number is chosen RANDOMLY when running a test
server.port = 8080

# REST endpoints are protected by HTTP Basic Authentication.
# The README.md file has directions for encrypting this password.
security.user.name     = cds_web_user
security.user.password = ENC(jyNjVjjUHqw5Kjol+HWfQNdQFX1JBcWu)

# Java class name
spring.database.driver.classname=org.apache.derby.jdbc.EmbeddedDriver
# Platform name is used to find data.sql file on classpath
spring.datasource.platform = derby
# Database coordinates; the password can be encrypted, see README
spring.datasource.url=jdbc:derby:memory:cdsdb;create=true
spring.datasource.username = cds_db_user
spring.datasource.password = cds_db_pass

# Specify ORM dialect 
spring.jpa.database-platform=org.hibernate.dialect.DerbyTenSevenDialect
# Hibernate creates the tables when using Derby;
# "create-drop" is not needed for in-memory DB.
# In production, use "validate"
spring.jpa.hibernate.ddl-auto = create

###############################################################

# The following properties are similar in all deployments.

# REST endpoint configuration; i.e., where this server listens
server.contextPath=/ccds

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show all generated SQL statements on stdout
spring.jpa.show-sql=true
# This make the SQL pretty but shows no more info
# spring.jpa.properties.hibernate.format_sql=true
# Show values in SQL statements
# logging.level.org.hibernate.type=TRACE

# Generate names as annotated which use upper case.
# Without this config Spring uses lower case, which requires case-insensitivity at database.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Guards passwords
jasypt.encryptor.password=supersecret

# Guards sensitive HTTP endpoints
management.security.roles=SUPERUSER

# Enumerated code-name value sets.
# Case *IS* relevant here!
#
codeName.accessType.OR=Organization
codeName.accessType.PB=Public
codeName.accessType.PR=Private
codeName.accessType.RS=Restricted
#
codeName.artifactType.BP=Blueprint File
codeName.artifactType.CD=Cdump File
codeName.artifactType.DI=Docker Image
codeName.artifactType.DS=Data Source
codeName.artifactType.MD=Metadata
codeName.artifactType.MH=Model-H2O
codeName.artifactType.MI=Model Image
codeName.artifactType.MR=Model-R
codeName.artifactType.MS=Model-SciKit
codeName.artifactType.MT=Model-Tensorflow
codeName.artifactType.TE=TOSCA Template
codeName.artifactType.TG=TOSCA Generator Input File
codeName.artifactType.TS=TOSCA Schema
codeName.artifactType.TT=TOSCA Translate
codeName.artifactType.PJ=Protobuf File
#
codeName.deploymentStatus.DP=Deployed
codeName.deploymentStatus.FA=Failed
codeName.deploymentStatus.IP=In Progress
codeName.deploymentStatus.ST=Started
#
codeName.loginProvider.FB=Facebook
codeName.loginProvider.GH=GitHub
codeName.loginProvider.GP=Google Plus
codeName.loginProvider.LI=LinkedIn
#
codeName.messageSeverity.HI=High
codeName.messageSeverity.ME=Medium
codeName.messageSeverity.LO=Low
#
codeName.modelType.CL=Classification
codeName.modelType.DS=Data Sources
codeName.modelType.DT=Data Transformer
codeName.modelType.PR=Prediction
codeName.modelType.RG=Regression
#
codeName.notificationDeliveryMechanism.EM=Email
codeName.notificationDeliveryMechanism.TX=Text
#
codeName.peerStatus.AC=Active
codeName.peerStatus.IN=Inactive
codeName.peerStatus.RQ=Requested
codeName.peerStatus.RN=Renounced
codeName.peerStatus.DC=Declined
#
codeName.stepStatus.ST=Started
codeName.stepStatus.SU=Succeeded
codeName.stepStatus.FA=Failed
#
codeName.stepType.OB=Onboarding
codeName.stepType.VL=Validation
#
codeName.subscriptionScope.RF=Reference
codeName.subscriptionScope.FL=Full
#
codeName.toolkitType.CP=Composite Solution
codeName.toolkitType.DS=Design Studio
codeName.toolkitType.H2=H2O
codeName.toolkitType.PB=Probe
codeName.toolkitType.RC=R
codeName.toolkitType.SK=Scikit-Learn
codeName.toolkitType.TF=TensorFlow
codeName.toolkitType.TC=Training Client
codeName.toolkitType.BR=Data Broker
codeName.toolkitType.ON=ONAP
#
codeName.validationStatus.FA==Failed
codeName.validationStatus.IP=In Progress
codeName.validationStatus.NV=Not Validated
codeName.validationStatus.PS=Passed
codeName.validationStatus.SB=Submitted
#
codeName.validationType.SS=Security Scan
codeName.validationType.LC=License Check
codeName.validationType.OQ=OSS Quantification
codeName.validationType.TA=Text Analysis

# Specific loggers can be configured here:
# logging.level.org.springframework.web=INFO
