/*-
 * ===============LICENSE_START=======================================================
 * Acumos
 * ===================================================================================
 * Copyright (C) 2017 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
 * ===================================================================================
 * This Acumos software file is distributed by AT&T and Tech Mahindra
 * under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * This file is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ===============LICENSE_END=========================================================
 */

package org.acumos.cds.repository;

import org.acumos.cds.domain.MLPCatRoleMap;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;

public interface CatRoleMapRepository extends CrudRepository<MLPCatRoleMap, MLPCatRoleMap.CatalogRoleMapPK> {

	/**
	 * Counts the catalogs assigned to the specified role .
	 * 
	 * @param roleId
	 *                   Role ID
	 * @return Count of catalogs mapped to the role
	 */
	@Query(value = "select count(m) from MLPCatRoleMap m where m.roleId = :roleId")
	long countRoleCatalogs(@Param("roleId") String roleId);

	/**
	 * Finds all entries for the specified catalogId.
	 * 
	 * Generated by Spring magic.
	 * 
	 * @param catalogId
	 *                      Catalog ID
	 * @return Iterable of map objects
	 */
	Iterable<MLPCatRoleMap> findByCatalogId(@Param("catalogId") String catalogId);

	/**
	 * 
	 * Gets IDs for catalogs with access specially granted to the user. These are
	 * expected to be restricted.
	 * 
	 * Maybe this doesn't quite fit in this repository, but where else?
	 * 
	 * @param userId
	 *                   User ID
	 * @return Iterable of String
	 */
	@Query(value = " SELECT crm.catalogId FROM MLPCatRoleMap crm, MLPUserRoleMap urm "
			+ "  WHERE crm.roleId = urm.roleId " //
			+ "    AND urm.userId = :userId")
	Iterable<String> findCatalogIdsByUserId(@Param("userId") String userId);

}
