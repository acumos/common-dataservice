<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.acumos.common-dataservice</groupId>
	<artifactId>cmn-data-svc-server</artifactId>
	<!-- This version number is used to tag the Docker image. No need for maven 
		snapshot convention here, registry allows replace -->
	<version>1.10.2</version>
	<name>Acumos Common Data Service Server</name>
	<description>Micro service based on Spring-Boot</description>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.7.RELEASE</version>
		<!-- silence warning about parent relative path -->
		<relativePath />
	</parent>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- Stand-alone RESTFul application -->
		<start-class>org.acumos.cds.CdsApplication</start-class>
		<!-- Client jar is in nexus repo -->
		<client.version>${project.version}-SNAPSHOT</client.version>
		<springfox.version>2.7.0</springfox.version>
		<!-- Jenkins invokes mvn with argument -Dbuild.number=${BUILD_NUMBER} -->
		<build.number>0</build.number>
		<!-- EELF jar is in ONAP nexus repo -->
		<onap.nexus.url>https://nexus.onap.org</onap.nexus.url>
		<!-- Docker coordinates -->
		<!-- TODO get environment variable names with Nexus credentials -->
		<docker.host>${env.docker_host}</docker.host>
		<docker.registry>nexus3.acumos.org:10003</docker.registry>
		<docker.registry.username>${env.docker_registry_username}</docker.registry.username>
		<docker.registry.password>${env.docker_registry_password}</docker.registry.password>
	</properties>
	<!-- Specify repositories here to avoid coordination of ~/.m2/settings.xml 
		files among developers. Use values (not properties) so oparent can be resolved. 
		The IDs should match Jenkins template values. -->
	<repositories>
		<repository>
			<id>releases</id>
			<name>Acumos Release Repository</name>
			<url>https://nexus.acumos.org/content/repositories/releases</url>
		</repository>
		<repository>
			<id>snapshots</id>
			<name>Acumos Snapshot Repository</name>
			<url>https://nexus.acumos.org/content/repositories/snapshots</url>
		</repository>
		<repository>
			<id>public</id>
			<url>https://nexus.acumos.org/content/groups/public</url>
		</repository>
		<repository>
			<id>onap-snapshots</id>
			<name>ONAP Snapshot Repository</name>
			<url>${onap.nexus.url}/content/repositories/snapshots</url>
		</repository>
		<repository>
			<id>onap-releases</id>
			<name>ONAP Release Repository</name>
			<url>${onap.nexus.url}/content/repositories/releases</url>
		</repository>
	</repositories>
	<dependencies>
		<dependency>
			<groupId>org.acumos.common-dataservice</groupId>
			<artifactId>cmn-data-svc-client</artifactId>
			<version>${client.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<!-- Spring MVC & REST, use Embedded Tomcat -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<!-- Spring Data JPA Repository support -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<!-- Enforce HTTP Basic Auth on all requests -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>com.att.eelf</groupId>
			<artifactId>eelf-core</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<!-- Spring-boot sets the version -->
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<!-- Spring-boot sets the version -->
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<!-- Spring-boot sets the version -->
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<!-- Spring-boot sets the version -->
		</dependency>
		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
			<!-- Spring-boot sets the version -->
		</dependency>
		<!-- encrypted password in properties -->
		<dependency>
			<groupId>com.github.ulisesbocchio</groupId>
			<artifactId>jasypt-spring-boot-starter</artifactId>
			<version>1.8</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${springfox.version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${springfox.version}</version>
		</dependency>
		<!-- Derby is always included, altho primarily used for testing -->
		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derby</artifactId>
			<!-- Spring-boot sets the version -->
		</dependency>
		<!-- Test dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<!-- Spring-boot sets the version -->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<!-- Spring-boot sets the version -->
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.14</version>
				<configuration>
					<licenseName>acumos</licenseName>
					<licenseResolver>${project.baseUri}/src/license</licenseResolver>
					<addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
					<processStartTag>===============LICENSE_START=======================================================</processStartTag>
					<processEndTag>===============LICENSE_END=========================================================</processEndTag>
					<sectionDelimiter>===================================================================================</sectionDelimiter>
					<inceptionYear>2017</inceptionYear>
					<organizationName><![CDATA[AT&T Intellectual Property & Tech Mahindra. All rights reserved.]]></organizationName>
					<projectName>Acumos</projectName>
					<canUpdateCopyright>true</canUpdateCopyright>
					<canUpdateDescription>true</canUpdateDescription>
					<canUpdateLicense>true</canUpdateLicense>
					<emptyLineAfterHeader>true</emptyLineAfterHeader>
				</configuration>
			</plugin>
			<!-- Require Java 1.8 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<!-- Spring sets the <version></version> -->
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<!-- Add the build number to the manifest. Spring-Boot uses a complex 
				packaging process that makes access to the original Manifest.MF very difficult. 
				However, Java provides access to the implementation version for a package, 
				so cram the build number into there. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<!-- Spring sets the <version>2.5</version> -->
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Version>${project.version}-b${build.number}</Implementation-Version>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<!-- Build a single jar with all dependencies -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- Spring sets the <version></version> -->
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Skip the deploy-jar-to-nexus step -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<!-- Spring sets the <version>2.8</version> -->
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.6.201602180812</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- https://stackoverflow.com/questions/39126226/fabric8-springboot-full-example -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.22.1</version>
				<configuration>
					<verbose>true</verbose>
					<dockerHost>${docker.host}</dockerHost>
					<registry>${docker.registry}</registry>
					<authConfig>
						<username>${docker.registry.username}</username>
						<password>${docker.registry.password}</password>
					</authConfig>
					<images>
						<image>
							<name>common-dataservice:${project.version}</name>
							<build>
								<from>frolvlad/alpine-oraclejdk8:slim</from>
								<tags>
									<tag>${project.version}</tag>
	   	 							<tag>${maven.build.timestamp}</tag>
								</tags>
								<assembly>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<cmd>
									<!-- CDATA prevents Eclipse formatter from breaking line -->
									<shell><![CDATA[java -Djava.security.egd=file:/dev/./urandom -jar /maven/${project.artifactId}-${project.version}.${project.packaging}]]></shell>
								</cmd>
							</build>
						</image>
					</images>
				</configuration>
		<!-- TODO enable Docker when host, username, password are available
				<executions>
					<execution>
						<goals>
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
		TODO -->
			</plugin>
		</plugins>
	</build>
	<!-- No distributionManagement section, jars are not deployed -->
</project>
